{
  "version": 3,
  "sources": ["PatternFormatter.js"],
  "sourcesContent": ["const PATTERNS = {\r\n  alpha: \"[A-Za-z]+\",\r\n  alphanum: \"[A-Za-z0-9]+\",\r\n  int: \"[0-9]+\",\r\n  decimal: \"[0-9.]+\",\r\n  currency: \"[0-9]+[.]?[0-9]{0,2}\",\r\n  // https://haacked.com/archive/2020/05/17/french-thousand-separator-mystery/\r\n  currency_locale: \"[0-9., \\u202F\\u00A0]+([.,][0-9]{0,2})?\",\r\n  date: \"[0-9]{0,4}(-[0-2]?[0-9]?)?(-[0-3]?[0-9]?)?\",\r\n  time: \"[0-2]?[0-9](:[0-9]{0,2})?(:[0-9]{0,2})?\",\r\n  time_hm: \"[0-2]?[0-9](:[0-9]{0,2})?\",\r\n  creditcard: \"[0-9]{0,4}( [0-9]{0,4})?( [0-9]{0,4})?( [0-9]{0,4})?\",\r\n};\r\nconst SEPARATORS = [\" \", \".\", \",\", \"-\", \":\"];\r\nclass PatternFormatter {\r\n  /**\r\n   * @param {HTMLInputElement} el\r\n   */\r\n  constructor(el) {\r\n    this.el = el;\r\n    this.regex = null;\r\n\r\n    // We can use an alias\r\n    if (this.el.dataset.alias) {\r\n      let pattern = PATTERNS[this.el.dataset.alias] ?? \"\";\r\n      el.setAttribute(\"pattern\", pattern);\r\n    }\r\n    // Or a custom pattern (! must match partial input)\r\n    if (el.hasAttribute(\"pattern\")) {\r\n      // input pattern matches the whole value\r\n      this.regex = new RegExp(\"^\" + el.getAttribute(\"pattern\") + \"$\", \"u\");\r\n    }\r\n\r\n    this.setDefaultPlaceholder();\r\n\r\n    this.el.addEventListener(\"beforeinput\", (ev) => {\r\n      // Check if the value matches the pattern, if so, proceed\r\n      let curr = this.el.value;\r\n      if (!ev.data || !this.regex) {\r\n        return;\r\n      }\r\n      curr += ev.data;\r\n      if (curr.length === 0) {\r\n        return;\r\n      }\r\n      let decSep = this.getDecimalSeparator();\r\n      let isPrevented = false;\r\n      if (this.el.hasAttribute(\"maxlength\")) {\r\n        // Check max length for currency with decimals\r\n        if ([\"currency\", \"currency_locale\", \"decimal\"].includes(this.el.dataset.alias)) {\r\n          let maxlength = this.el.getAttribute(\"maxlength\");\r\n          if (ev.data != decSep && !curr.includes(decSep)) {\r\n            maxlength -= 3;\r\n          }\r\n          if (curr.length > maxlength) {\r\n            ev.preventDefault();\r\n            isPrevented = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Prevent invalid input\r\n      if (!this.regex.test(curr)) {\r\n        ev.preventDefault();\r\n        isPrevented = true;\r\n      }\r\n\r\n      if (isPrevented) {\r\n        // We prevented a separator ? We should use the right one\r\n        if (this.el.value.length && SEPARATORS.includes(ev.data)) {\r\n          switch (this.el.dataset.alias) {\r\n            case \"decimal\":\r\n            case \"currency\":\r\n            case \"currency_locale\":\r\n              // We can only have one\r\n              if (!this.el.value.includes(decSep)) {\r\n                this.el.value = this.el.value + decSep;\r\n              }\r\n              break;\r\n            case \"date\":\r\n              if (this.el.value.length < 8) {\r\n                this.el.value = this.el.value + \"-\";\r\n              }\r\n              break;\r\n            case \"time\":\r\n            case \"time_hm\":\r\n              if (this.el.value.length < 6) {\r\n                this.el.value = this.el.value + \":\";\r\n              }\r\n            case \"creditcard\":\r\n              if (this.el.value.length < 16) {\r\n                this.el.value = this.el.value + \" \";\r\n              }\r\n              break;\r\n          }\r\n        }\r\n\r\n        // We prevented a number ? Maybe we just need a separator in between\r\n        if (!Number.isNaN(Number.parseInt(ev.data))) {\r\n          let len = this.el.value.length;\r\n          switch (this.el.dataset.alias) {\r\n            case \"date\":\r\n              if (len === 4 || len === 7) {\r\n                this.el.value = this.el.value + \"-\" + ev.data;\r\n              }\r\n              break;\r\n            case \"time\":\r\n            case \"time_hm\":\r\n              if (len === 2 || len === 5) {\r\n                this.el.value = this.el.value + \":\" + ev.data;\r\n              }\r\n            case \"creditcard\":\r\n              if (len === 4 || len === 9 || len === 14) {\r\n                this.el.value = this.el.value + \" \" + ev.data;\r\n              }\r\n              break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Add on focus unformatting\r\n    this.el.addEventListener(\"focus\", (ev) => {\r\n      if (!this.el.value) {\r\n        return;\r\n      }\r\n\r\n      // Otherwise max length won't work properly\r\n      if (this.el.dataset.alias == \"currency_locale\") {\r\n        this.el.value = this.getUnformattedValue();\r\n      }\r\n    });\r\n\r\n    // Add some automatic formatting on blur\r\n    this.el.addEventListener(\"blur\", (ev) => {\r\n      // Allow no value\r\n      if (!this.el.value) {\r\n        return;\r\n      }\r\n      let parts;\r\n      let formatter;\r\n      let separator;\r\n      let result;\r\n      switch (this.el.dataset.alias) {\r\n        case \"decimal\":\r\n          formatter = new Intl.NumberFormat(\"en-US\", { useGrouping: false });\r\n          break;\r\n        case \"currency\":\r\n          formatter = new Intl.NumberFormat(\"en-US\", { useGrouping: false, maximumFractionDigits: 2, minimumFractionDigits: 2 });\r\n          break;\r\n        case \"currency_locale\":\r\n          formatter = this.getLatinFormatter();\r\n          break;\r\n        case \"date\":\r\n          separator = \"-\";\r\n          parts = this.el.value.split(separator).filter(Number);\r\n          if (!parts[0]) {\r\n            parts[0] = new Date().getFullYear();\r\n          }\r\n          while (parts.length < 3) {\r\n            parts.push(\"01\");\r\n          }\r\n          // Append year\r\n          while (parts[0].length < 4) {\r\n            parts[0] += \"0\";\r\n          }\r\n          // Prepend month and day\r\n          while (parts[1].length < 2) {\r\n            parts[1] = \"0\" + parts[1];\r\n          }\r\n          while (parts[2].length < 2) {\r\n            parts[2] = \"0\" + parts[2];\r\n          }\r\n          break;\r\n        case \"time\":\r\n        case \"time_hm\":\r\n          let len = this.el.dataset.alias === \"time\" ? 3 : 2;\r\n          separator = \":\";\r\n          parts = this.el.value.split(separator);\r\n          while (parts.length < len) {\r\n            parts.push(\"00\");\r\n          }\r\n          for (let j = 0; j < len; j++) {\r\n            while (parts[j].length < 2) {\r\n              parts[j] += \"0\";\r\n            }\r\n          }\r\n\r\n          break;\r\n      }\r\n\r\n      if (formatter) {\r\n        result = formatter.format(this.getRawValue());\r\n        if (result != \"NaN\") {\r\n          this.el.value = result;\r\n        }\r\n      }\r\n      if (parts) {\r\n        this.el.value = parts.join(separator);\r\n      }\r\n    });\r\n  }\r\n\r\n  setDefaultPlaceholder() {\r\n    if (this.el.hasAttribute(\"placeholder\")) {\r\n      return;\r\n    }\r\n    let placeholder;\r\n    switch (this.el.dataset.alias) {\r\n      case \"alpha\":\r\n        if (this.el.hasAttribute(\"maxlength\")) {\r\n          placeholder = \"a\".repeat(this.el.getAttribute(\"maxlength\"));\r\n        }\r\n        break;\r\n      case \"alphanum\":\r\n        if (this.el.hasAttribute(\"maxlength\")) {\r\n          placeholder = \"\u00B7\".repeat(this.el.getAttribute(\"maxlength\"));\r\n        }\r\n        break;\r\n      case \"int\":\r\n        if (this.el.hasAttribute(\"maxlength\")) {\r\n          placeholder = \"0\".repeat(this.el.getAttribute(\"maxlength\"));\r\n        }\r\n        break;\r\n      case \"decimal\":\r\n      case \"currency\":\r\n      case \"currency_locale\":\r\n        if (this.el.hasAttribute(\"maxlength\")) {\r\n          placeholder = \"0\".repeat(this.el.getAttribute(\"maxlength\") - 3);\r\n          placeholder += this.getSeparator() + \"00\";\r\n        }\r\n        break;\r\n      case \"date\":\r\n        placeholder = \"yyyy-mm-dd\";\r\n        break;\r\n      case \"time\":\r\n        placeholder = \"hh:mm:ss\";\r\n        break;\r\n      case \"time_hm\":\r\n        placeholder = \"hh:mm\";\r\n        break;\r\n      case \"creditcard\":\r\n        placeholder = \"\u00B7\u00B7\u00B7\u00B7 \u00B7\u00B7\u00B7\u00B7 \u00B7\u00B7\u00B7\u00B7 \u00B7\u00B7\u00B7\u00B7\";\r\n        break;\r\n    }\r\n    if (placeholder) {\r\n      this.el.setAttribute(\"placeholder\", placeholder);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a plain js number and keep locale decimal separator\r\n   * @returns {Number}\r\n   */\r\n  getUnformattedValue() {\r\n    let separator = this.getDecimalSeparator();\r\n    return this.el.value.replace(new RegExp(\"[^0-9\\\\\" + separator + \"]\", \"g\"), \"\");\r\n  }\r\n\r\n  /**\r\n   * Returns a plain js number ready to be formatted\r\n   * @returns {Number}\r\n   */\r\n  getRawValue() {\r\n    return this.getUnformattedValue().replace(this.getDecimalSeparator(), \".\");\r\n  }\r\n\r\n  getLatinFormatter() {\r\n    const opts = { maximumFractionDigits: 2, minimumFractionDigits: 2 };\r\n\r\n    // We pass an array because null doesn't work\r\n    const formatter = Intl.NumberFormat([], opts);\r\n    if (formatter.resolvedOptions().numberingSystem === \"latn\") {\r\n      return formatter;\r\n    }\r\n    return new Intl.NumberFormat(\"en-US\", opts);\r\n  }\r\n\r\n  getSeparator() {\r\n    switch (this.el.dataset.alias) {\r\n      case \"int\":\r\n      case \"decimal\":\r\n      case \"currency\":\r\n        return \".\";\r\n      case \"currency_locale\":\r\n        return this.getDecimalSeparator();\r\n      case \"date\":\r\n        return \"-\";\r\n        break;\r\n      case \"time\":\r\n      case \"time_hm\":\r\n        return \":\";\r\n      case \"creditcard\":\r\n        return \" \";\r\n    }\r\n  }\r\n\r\n  getDecimalSeparator() {\r\n    if (this.el.dataset.alias != \"currency_locale\") {\r\n      return \".\";\r\n    }\r\n    return Intl.NumberFormat()\r\n      .formatToParts(1.1)\r\n      .find((part) => part.type === \"decimal\").value;\r\n  }\r\n\r\n  static init(selector = \"input.formatter\") {\r\n    document.querySelectorAll(selector).forEach((el) => {\r\n      new PatternFormatter(el);\r\n    });\r\n  }\r\n}\r\n\r\nexport default PatternFormatter;\r\n"],
  "mappings": "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",
  "names": []
}
